networks:
  tf_net: {}

volumes:
  pg_org1: {}
  pg_reg: {}
  ipfs_data: {}
  besu_data: {}
  acapy_issuer_wallet: {}
  acapy_verifier_wallet: {}
  firefly_org1_data: {}
  firefly_reg_data: {}

services:
  besu:
    image: "${BESU_IMAGE}:${BESU_TAG}"
    container_name: besu
    command: >
      --network=dev
      --data-path=/data
      --rpc-http-enabled
      --rpc-http-api=ETH,NET,WEB3,TXPOOL,ADMIN,CLIQUE
      --rpc-ws-enabled
      --rpc-ws-api=ETH,NET,WEB3,TXPOOL,CLIQUE
      --host-allowlist=*
      --min-gas-price=0
    ports:
      - "${BESU_HTTP:-8545}:8545"
      - "${BESU_WS:-8546}:8546"
    networks: [tf_net]
    volumes:
      - besu_data:/data

  ipfs:
    image: ipfs/kubo:v0.28.0
    container_name: ipfs
    environment:
      IPFS_PROFILE: server
    ports:
      - "${IPFS_API:-5001}:5001"
    networks: [tf_net]
    volumes:
      - ipfs_data:/data/ipfs

  postgres_org1:
    image: "${POSTGRES_IMAGE}:${POSTGRES_TAG}"
    container_name: pg_org1
    environment:
      POSTGRES_PASSWORD: firefly
      POSTGRES_USER: firefly
      POSTGRES_DB: firefly
    networks: [tf_net]
    volumes:
      - pg_org1:/var/lib/postgresql/data

  evmconnect_org1:
    image: "${FF_EVMCONNECT_IMAGE}:${FF_EVMCONNECT_TAG}"
    container_name: evmconnect_org1
    environment:
      EVMCONNECT_URL: http://besu:8545
      EVMCONNECT_CONFIRMATIONS: "0"
      EVMCONNECT_POLL_INTERVAL: "1s"
    networks: [tf_net]
    depends_on:
      - besu

  dx_org1:
    image: "${FF_DX_IMAGE}:${FF_DX_TAG}"
    container_name: dx_org1
    environment:
      DX_HTTPS_BIND_ADDRESS: 0.0.0.0
      DX_HTTPS_PUBLIC_URL: http://dx_org1:3001
    ports:
      - "3001:3001"
    networks: [tf_net]

  firefly_org1:
    image: "${FF_CORE_IMAGE}:${FF_CORE_TAG}"
    container_name: firefly_org1
    environment:
      FF_CORE_ADMIN_ENABLED: "true"
      FF_LOG_LEVEL: info
      FF_DATABASE_TYPE: postgres
      FF_DATABASE_URL: postgres://firefly:firefly@pg_org1:5432/firefly?sslmode=disable
      FF_BLOCKCHAIN_TYPE: evm
      FF_BLOCKCHAIN_CONNECTOR: evmconnect
      FF_BLOCKCHAIN_URL: http://evmconnect_org1:3000
      FF_DATAEXCHANGE_TYPE: https
      FF_DATAEXCHANGE_URL: http://dx_org1:3001
      FF_SHAREDSTORAGE_TYPE: ipfs
      FF_SHAREDSTORAGE_IPFS_URL: http://ipfs:5001
      FF_MULTIPARTY_ENABLED: "true"
      FF_MULTIPARTY_ORG_NAME: "Org1"
      FF_MULTIPARTY_NODE_NAME: "org1-node"
      FF_MULTIPARTY_KEY: "${FF_ORG1_MULTIPARTY_KEY}"
      FF_DATA_DIR: /firefly/data
    ports:
      - "${FF_ORG1:-5000}:5000"
    networks: [tf_net]
    volumes:
      - firefly_org1_data:/firefly
    depends_on:
      - postgres_org1
      - evmconnect_org1
      - ipfs
      - dx_org1

  firefly_console:
    build:
      context: ../../ui-src
      dockerfile: Dockerfile
      args:
        REACT_APP_FF_ENDPOINT: http://localhost:${FF_ORG1:-5000}
    image: local/firefly-ui:dev
    pull_policy: never
    container_name: firefly_console
    environment:
      REACT_APP_FF_ENDPOINT: http://localhost:${FF_ORG1:-5000}
    ports:
      - "${FF_UI:-3000}:3000"
    networks: [tf_net]
    depends_on:
      - firefly_org1

  postgres_reg:
    image: "${POSTGRES_IMAGE}:${POSTGRES_TAG}"
    container_name: pg_reg
    environment:
      POSTGRES_PASSWORD: firefly
      POSTGRES_USER: firefly
      POSTGRES_DB: firefly
    networks: [tf_net]
    volumes:
      - pg_reg:/var/lib/postgresql/data

  evmconnect_reg:
    image: "${FF_EVMCONNECT_IMAGE}:${FF_EVMCONNECT_TAG}"
    container_name: evmconnect_reg
    environment:
      EVMCONNECT_URL: http://besu:8545
      EVMCONNECT_CONFIRMATIONS: "0"
      EVMCONNECT_POLL_INTERVAL: "1s"
    networks: [tf_net]
    depends_on:
      - besu

  firefly_reg:
    image: "${FF_CORE_IMAGE}:${FF_CORE_TAG}"
    container_name: firefly_reg
    environment:
      FF_CORE_ADMIN_ENABLED: "true"
      FF_CORE_READONLY: "true"
      FF_LOG_LEVEL: info
      FF_DATABASE_TYPE: postgres
      FF_DATABASE_URL: postgres://firefly:firefly@pg_reg:5432/firefly?sslmode=disable
      FF_BLOCKCHAIN_TYPE: evm
      FF_BLOCKCHAIN_CONNECTOR: evmconnect
      FF_BLOCKCHAIN_URL: http://evmconnect_reg:3000
      FF_SHAREDSTORAGE_TYPE: ipfs
      FF_SHAREDSTORAGE_IPFS_URL: http://ipfs:5001
      FF_MULTIPARTY_ENABLED: "true"
      FF_MULTIPARTY_ORG_NAME: "Regulator"
      FF_MULTIPARTY_NODE_NAME: "reg-node"
      FF_MULTIPARTY_KEY: "${FF_REG_MULTIPARTY_KEY}"
      FF_DATA_DIR: /firefly/data
    ports:
      - "${FF_REG:-5100}:5000"
    networks: [tf_net]
    volumes:
      - firefly_reg_data:/firefly
    depends_on:
      - postgres_reg
      - evmconnect_reg
      - ipfs

  acapy_issuer:
    image: "${ACAPY_IMAGE}:${ACAPY_TAG}"
    container_name: acapy_issuer
    command: >
      start
      --inbound-transport http 0.0.0.0 8030
      --outbound-transport http
      --admin 0.0.0.0 8031
      --label IssuerAgent
      --endpoint http://acapy_issuer:8030
      --wallet-type askar-anoncreds --wallet-name issuer --wallet-key insecure
      --auto-provision
      --auto-accept-invites
      --auto-accept-requests
      --admin-insecure-mode
    ports:
      - "8030:8030"
      - "8031:8031"
    networks: [tf_net]
    volumes:
      - acapy_issuer_wallet:/home/aries/.askar/

  acapy_verifier:
    image: "${ACAPY_IMAGE}:${ACAPY_TAG}"
    container_name: acapy_verifier
    command: >
      start
      --inbound-transport http 0.0.0.0 8040
      --outbound-transport http
      --admin 0.0.0.0 8041
      --label VerifierAgent
      --endpoint http://acapy_verifier:8040
      --wallet-type askar-anoncreds --wallet-name verifier --wallet-key insecure
      --auto-provision
      --auto-accept-invites
      --auto-accept-requests
      --admin-insecure-mode
    ports:
      - "8040:8040"
      - "8041:8041"
    networks: [tf_net]
    volumes:
      - acapy_verifier_wallet:/home/aries/.askar/