#//trust-fabric/ops/compose/firefly-besu-aries.yaml




networks:
  tf_net: {}

volumes:
  pg_org1: {}
  pg_reg: {}
  ipfs_data: {}
  besu_data: {}
  acapy_issuer_wallet: {}
  acapy_verifier_wallet: {}
  firefly_org1_data: {}
  firefly_reg_data: {}
  evmconnect_org1_data: {}
  evmconnect_reg_data: {}
  dx_org1_data: {}
  dx_reg_data: {}

services:
  besu:
    image: "${BESU_IMAGE}:${BESU_TAG}"
    container_name: besu
    user: "0:0"
    command: >
      --network=dev
      --data-path=/data
      --rpc-http-enabled
      --rpc-http-api=ETH,NET,WEB3,TXPOOL,ADMIN,CLIQUE
      --rpc-ws-enabled
      --rpc-ws-api=ETH,NET,WEB3,TXPOOL,CLIQUE
      --host-allowlist=*
      --min-gas-price=0
      --data-storage-format=BONSAI
    ports:
      - "${BESU_HTTP:-8545}:8545"
      - "${BESU_WS:-8546}:8546"
    networks: [tf_net]
    volumes:
      - besu_data:/data
    ulimits: { nofile: { soft: 65535, hard: 65535 } }
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8545"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  ipfs:
    image: ipfs/kubo:v0.28.0
    container_name: ipfs
    environment:
      IPFS_PROFILE: server
    ports:
      - "${IPFS_API:-5001}:5001"
      # - "8080:8080"     # enable if you want the gateway from host
    networks: [tf_net]
    volumes:
      - ipfs_data:/data/ipfs
    ulimits: { nofile: { soft: 65535, hard: 65535 } }
    restart: unless-stopped

  postgres_org1:
    image: "${POSTGRES_IMAGE}:${POSTGRES_TAG}"
    container_name: postgres_org1
    environment:
      POSTGRES_PASSWORD: firefly
      POSTGRES_USER: firefly
      POSTGRES_DB: firefly
    networks: [tf_net]
    volumes:
      - pg_org1:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U firefly"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  postgres_reg:
    image: "${POSTGRES_IMAGE}:${POSTGRES_TAG}"
    container_name: postgres_reg
    environment:
      POSTGRES_PASSWORD: firefly
      POSTGRES_USER: firefly
      POSTGRES_DB: firefly
    networks: [tf_net]
    volumes:
      - pg_reg:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U firefly"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  evmconnect_org1:
    image: "${FF_EVMCONNECT_IMAGE}:${FF_EVMCONNECT_TAG}"
    container_name: evmconnect_org1
    user: "0:0"
    command: ["-f", "/etc/evmconnect/config.yaml"]
    networks: [tf_net]
    depends_on:
      besu: { condition: service_healthy }
    volumes:
      - ./config/evmconnect/org1/config.yaml:/etc/evmconnect/config.yaml:ro
      - evmconnect_org1_data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  evmconnect_reg:
    image: "${FF_EVMCONNECT_IMAGE}:${FF_EVMCONNECT_TAG}"
    container_name: evmconnect_reg
    user: "0:0"
    command: ["-f", "/etc/evmconnect/config.yaml"]
    networks: [tf_net]
    depends_on:
      besu: { condition: service_healthy }
    volumes:
      - ./config/evmconnect/reg/config.yaml:/etc/evmconnect/config.yaml:ro
      - evmconnect_reg_data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  # FireFly Data Exchange for org1 (HTTPS API + P2P TCP)
  dx_org1:
    image: "${FF_DX_IMAGE}:${FF_DX_TAG}"
    container_name: dx_org1
    environment:
      DATA_DIRECTORY: /config
      LOG_LEVEL: debug
    expose:
      - "41000"
    ports:
      - "3001:3001"
      - "41000:41000"
    networks: [tf_net]
    volumes:
      - type: bind
        source: C:\CODES\trust\trust-fabric\ops\compose\config\dx_org1   # <-- EXACT PATH
        target: /config
        read_only: true
        bind:
          create_host_path: true
      - type: volume
        source: dx_org1_data
        target: /data/files
    healthcheck:
      test: ["CMD-SHELL", "wget --no-check-certificate --spider -q https://localhost:3001/api/v1/status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65535
        hard: 65535

  dx_reg:
    image: "${FF_DX_IMAGE}:${FF_DX_TAG}"
    container_name: dx_reg
    environment:
      DATA_DIRECTORY: /config
      LOG_LEVEL: debug
    expose:
      - "41000"
    ports:
      - "3002:3001"     # HTTPS for dx_reg on host 3002
      - "41001:41000"   # P2P for dx_reg on host 41001
    networks: [tf_net]
    volumes:
      - type: bind
        source: C:\CODES\trust\trust-fabric\ops\compose\config\dx_reg
        target: /config
        read_only: true
        bind:
          create_host_path: true
      - type: volume
        source: dx_reg_data
        target: /data/files
    healthcheck:
      test: ["CMD-SHELL", "wget --no-check-certificate --spider -q https://localhost:3001/api/v1/status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65535
        hard: 65535




  firefly_org1:
    image: "${FF_CORE_IMAGE}:${FF_CORE_TAG}"
    container_name: firefly_org1
    ports:
      - "${FF_ORG1:-5000}:5000"
    networks: [tf_net]
    volumes:
      - firefly_org1_data:/firefly
      - ./config/firefly/org1/firefly.core.yaml:/etc/firefly/firefly.core.yaml:ro
    depends_on:
      postgres_org1:   { condition: service_healthy }
      evmconnect_org1: { condition: service_healthy }
      dx_org1:         { condition: service_healthy }
      ipfs:            { condition: service_started }
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/api/v1/status"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  firefly_reg:
    image: "${FF_CORE_IMAGE}:${FF_CORE_TAG}"
    container_name: firefly_reg
    ports:
      - "${FF_REG:-5100}:5000"
    networks: [tf_net]
    volumes:
      - firefly_reg_data:/firefly
      - ./config/firefly/reg/firefly.core.yaml:/etc/firefly/firefly.core.yaml:ro
    depends_on:
      postgres_reg:    { condition: service_healthy }
      evmconnect_reg:  { condition: service_healthy }
      dx_org1:         { condition: service_healthy }
      ipfs:            { condition: service_started }
      dx_reg:         { condition: service_healthy }
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/api/v1/status"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  firefly_console:
    build:
      context: ../../ui-src
      dockerfile: Dockerfile
      args:
        REACT_APP_FF_ENDPOINT: http://localhost:${FF_ORG1:-5000}
    image: local/firefly-ui:dev
    pull_policy: never
    container_name: firefly_console
    environment:
      REACT_APP_FF_ENDPOINT: http://localhost:${FF_ORG1:-5000}
    ports:
      - "${FF_UI:-3000}:3000"
    networks: [tf_net]
    depends_on:
      - firefly_org1
    restart: unless-stopped

  acapy_issuer:
    image: "${ACAPY_IMAGE}:${ACAPY_TAG}"
    container_name: acapy_issuer
    command: >
      start
      --inbound-transport http 0.0.0.0 8030
      --outbound-transport http
      --admin 0.0.0.0 8031
      --label IssuerAgent
      --endpoint http://acapy_issuer:8030
      --wallet-type askar-anoncreds --wallet-name issuer --wallet-key insecure
      --auto-provision
      --auto-accept-invites
      --auto-accept-requests
      --admin-insecure-mode
      --no-ledger
    ports:
      - "8030:8030"
      - "8031:8031"
    networks: [tf_net]
    volumes:
      - acapy_issuer_wallet:/home/aries/.askar/
    restart: unless-stopped

  acapy_verifier:
    image: "${ACAPY_IMAGE}:${ACAPY_TAG}"
    container_name: acapy_verifier
    command: >
      start
      --inbound-transport http 0.0.0.0 8040
      --outbound-transport http
      --admin 0.0.0.0 8041
      --label VerifierAgent
      --endpoint http://acapy_verifier:8040
      --wallet-type askar-anoncreds --wallet-name verifier --wallet-key insecure
      --auto-provision
      --auto-accept-invites
      --auto-accept-requests
      --admin-insecure-mode
      --no-ledger
    ports:
      - "8040:8040"
      - "8041:8041"
    networks: [tf_net]
    volumes:
      - acapy_verifier_wallet:/home/aries/.askar/
    restart: unless-stopped
